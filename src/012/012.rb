#!/usr/bin/env ruby

# Highly divisible triangular number
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

def get_divisors(n)
  divisors = []

  (1..Math.sqrt(n)).each do |i|
    if n%i == 0
      quotient = n/i
      divisors << quotient
      divisors << i if quotient != i
    end
  end
  divisors
end

def smallest_triangle_with_divisors(number)
  i = 1
  sum = 0
  loop do
    sum += i
    break if get_divisors(sum).size >= number
    i += 1
  end
  sum
end

puts get_divisors(1).size == 1
puts get_divisors(3).size == 2
puts get_divisors(6).size == 4
puts get_divisors(28).size == 6
puts smallest_triangle_with_divisors(6) == 28
puts smallest_triangle_with_divisors(501)
